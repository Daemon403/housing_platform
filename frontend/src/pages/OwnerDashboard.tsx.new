import React, { useEffect, useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { PropertyCard } from '../components/PropertyCard';
import './OwnerDashboard.css';

// Types
interface Booking {
  id: string;
  startDate: string;
  endDate: string;
  status: 'pending' | 'confirmed' | 'cancelled';
  user: {
    name: string;
    email: string;
    phone: string;
  };
}

export interface Listing {
  id: string;
  title: string;
  description: string;
  price: number;
  address: string | { street?: string; city?: string; state?: string; country?: string; postalCode?: string };
  status: 'available' | 'rented' | 'maintenance';
  bedrooms?: number;
  bathrooms?: number;
  size?: number;
  hasWifi?: boolean;
  hasParking?: boolean;
  hasKitchen?: boolean;
  hasWasher?: boolean;
  hasTv?: boolean;
  hasAirConditioning?: boolean;
  hasHeating?: boolean;
  hasDesk?: boolean;
  bookings: Booking[];
  images?: string[];
}

type ListingStatus = 'active' | 'pending' | 'rejected' | 'sold' | 'inactive';

const OwnerDashboard: React.FC = () => {
  const { user } = useAuth();
  const [listings, setListings] = useState<Listing[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showAddProperty, setShowAddProperty] = useState(false);
  
  const [newProperty, setNewProperty] = useState({
    title: '',
    description: '',
    price: '',
    address: '',
    location: '',
    latitude: 0,
    longitude: 0,
    propertyType: 'apartment',
    roomType: 'private-room',
    availableFrom: new Date().toISOString().split('T')[0],
    minStayMonths: 1,
    maxOccupants: 1,
    bedrooms: 1,
    bathrooms: 1,
    size: 50,
    isFurnished: false,
    hasParking: false,
    hasWifi: false,
    hasKitchen: false,
    hasAirConditioning: false,
    hasHeating: false,
    hasWasher: false,
    hasTv: false,
    hasDesk: false,
    status: 'pending' as ListingStatus,
  });

  const fetchListings = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('No authentication token found');
      
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5000'}/api/v1/listings/my-listings`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch listings');
      }

      const data = await response.json();
      setListings(data);
      setError(null);
    } catch (err) {
      console.error('Error fetching listings:', err);
      setError('Failed to load your properties. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteListing = async (id: string) => {
    if (window.confirm('Are you sure you want to delete this listing?')) {
      try {
        const token = localStorage.getItem('token');
        if (!token) throw new Error('No authentication token found');
        
        const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5000'}/api/v1/listings/${id}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        });

        if (!response.ok) {
          throw new Error('Failed to delete listing');
        }

        // Refresh the listings after deletion
        fetchListings();
      } catch (error) {
        console.error('Error deleting listing:', error);
        alert('Failed to delete listing. Please try again.');
      }
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    setNewProperty(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value
    }));
  };

  const handleAddProperty = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('No authentication token found');

      const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:5000'}/api/v1/listings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          ...newProperty,
          price: parseFloat(newProperty.price as string) || 0,
          bedrooms: Number(newProperty.bedrooms),
          bathrooms: Number(newProperty.bathrooms),
          size: Number(newProperty.size),
          minStayMonths: Number(newProperty.minStayMonths),
          maxOccupants: Number(newProperty.maxOccupants),
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to add property');
      }

      // Reset form and refresh listings
      setShowAddProperty(false);
      fetchListings();
    } catch (error) {
      console.error('Error adding property:', error);
      alert(error instanceof Error ? error.message : 'Failed to add property');
    }
  };

  useEffect(() => {
    if (user) {
      if (user.role === 'homeowner' || user.role === 'admin') {
        fetchListings();
      } else {
        setError('Access denied. Homeowner or admin privileges required.');
        setLoading(false);
      }
    } else {
      setError('Please log in to view this page');
      setLoading(false);
    }
  }, [user]);

  if (loading) {
    return (
      <div className="container">
        <h1>Owner Dashboard</h1>
        <p>Loading your properties...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container">
        <h1>Owner Dashboard</h1>
        <p className="error">{error}</p>
      </div>
    );
  }

  return (
    <div className="dashboard-container">
      <div className="dashboard-header">
        <h1>My Properties</h1>
        {!showAddProperty && (
          <button 
            className="btn btn-primary"
            onClick={() => setShowAddProperty(true)}
          >
            Add New Property
          </button>
        )}
      </div>

      {showAddProperty ? (
        <div className="property-form">
          <h2>Add New Property</h2>
          <form onSubmit={handleAddProperty}>
            <div className="form-group">
              <label htmlFor="title">Title *</label>
              <input
                type="text"
                id="title"
                name="title"
                value={newProperty.title}
                onChange={handleInputChange}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="description">Description</label>
              <textarea
                id="description"
                name="description"
                value={newProperty.description}
                onChange={handleInputChange}
                rows={4}
              />
            </div>

            <div className="form-group">
              <label htmlFor="price">Price per month ($) *</label>
              <input
                type="number"
                id="price"
                name="price"
                value={newProperty.price}
                onChange={handleInputChange}
                min="0"
                step="0.01"
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="address">Address *</label>
              <input
                type="text"
                id="address"
                name="address"
                value={newProperty.address}
                onChange={handleInputChange}
                required
              />
            </div>

            <div className="form-actions">
              <button
                type="button"
                className="btn btn-secondary"
                onClick={() => setShowAddProperty(false)}
              >
                Cancel
              </button>
              <button type="submit" className="btn btn-primary">
                Add Property
              </button>
            </div>
          </form>
        </div>
      ) : (
        <div className="dashboard-content">
          <div className="stats-container">
            <div className="stat-card">
              <h3>Total Properties</h3>
              <p>{listings.length}</p>
            </div>
            <div className="stat-card">
              <h3>Bookings This Month</h3>
              <p>{
                listings.reduce((count, listing) => {
                  const bookings = listing.bookings || [];
                  return count + bookings.filter(b => 
                    b && b.startDate && new Date(b.startDate).getMonth() === new Date().getMonth()
                  ).length;
                }, 0)
              }</p>
            </div>
            <div className="stat-card">
              <h3>Active Listings</h3>
              <p>{listings.filter(l => l.status === 'available').length}</p>
            </div>
          </div>

          <h2>My Listings</h2>
          {listings.length === 0 ? (
            <div className="empty-state">
              <p>You don't have any properties listed yet.</p>
              <button
                type="button"
                className="btn btn-primary"
                onClick={() => setShowAddProperty(true)}
              >
                List Your First Property
              </button>
            </div>
          ) : (
            <div className="listings-grid">
              {listings.map((listing) => (
                <PropertyCard 
                  key={listing.id}
                  listing={listing}
                  showBookings={true}
                  onDelete={handleDeleteListing}
                />
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default OwnerDashboard;
